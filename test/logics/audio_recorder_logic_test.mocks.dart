// Mocks generated by Mockito 5.3.2 from annotations
// in magic_record/test/logics/audio_recorder_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:record_platform_interface/src/record_platform_interface.dart'
    as _i3;
import 'package:record_platform_interface/src/types/types.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAmplitude_0 extends _i1.SmartFake implements _i2.Amplitude {
  _FakeAmplitude_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RecordPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecord extends _i1.Mock implements _i3.RecordPlatform {
  @override
  _i4.Future<void> start({
    String? path,
    _i2.AudioEncoder? encoder = _i2.AudioEncoder.aacLc,
    int? bitRate = 128000,
    int? samplingRate = 44100,
    int? numChannels = 2,
    _i2.InputDevice? device,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
          {
            #path: path,
            #encoder: encoder,
            #bitRate: bitRate,
            #samplingRate: samplingRate,
            #numChannels: numChannels,
            #device: device,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<String?> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
  @override
  _i4.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<bool> isRecording() => (super.noSuchMethod(
        Invocation.method(
          #isRecording,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> isPaused() => (super.noSuchMethod(
        Invocation.method(
          #isPaused,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Amplitude> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i4.Future<_i2.Amplitude>.value(_FakeAmplitude_0(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Amplitude>.value(_FakeAmplitude_0(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Amplitude>);
  @override
  _i4.Future<bool> isEncoderSupported(_i2.AudioEncoder? encoder) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [encoder],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i2.InputDevice>> listInputDevices() => (super.noSuchMethod(
        Invocation.method(
          #listInputDevices,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.InputDevice>>.value(<_i2.InputDevice>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.InputDevice>>.value(<_i2.InputDevice>[]),
      ) as _i4.Future<List<_i2.InputDevice>>);
  @override
  _i4.Stream<_i2.RecordState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i4.Stream<_i2.RecordState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.RecordState>.empty(),
      ) as _i4.Stream<_i2.RecordState>);
}
