// Mocks generated by Mockito 5.3.2 from annotations
// in magic_record/test/logics/audio_player_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:audio_waveforms/audio_waveforms.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlayerController].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerController extends _i1.Mock implements _i2.PlayerController {
  @override
  List<double> get waveformData => (super.noSuchMethod(
        Invocation.getter(#waveformData),
        returnValue: <double>[],
        returnValueForMissingStub: <double>[],
      ) as List<double>);
  @override
  _i2.PlayerState get playerState => (super.noSuchMethod(
        Invocation.getter(#playerState),
        returnValue: _i2.PlayerState.initialized,
        returnValueForMissingStub: _i2.PlayerState.initialized,
      ) as _i2.PlayerState);
  @override
  bool get shouldRefresh => (super.noSuchMethod(
        Invocation.getter(#shouldRefresh),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  int get maxDuration => (super.noSuchMethod(
        Invocation.getter(#maxDuration),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  String get playerKey => (super.noSuchMethod(
        Invocation.getter(#playerKey),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get shouldClearLabels => (super.noSuchMethod(
        Invocation.getter(#shouldClearLabels),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.Stream<_i2.PlayerState> get onPlayerStateChanged => (super.noSuchMethod(
        Invocation.getter(#onPlayerStateChanged),
        returnValue: _i3.Stream<_i2.PlayerState>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.PlayerState>.empty(),
      ) as _i3.Stream<_i2.PlayerState>);
  @override
  _i3.Stream<int> get onCurrentDurationChanged => (super.noSuchMethod(
        Invocation.getter(#onCurrentDurationChanged),
        returnValue: _i3.Stream<int>.empty(),
        returnValueForMissingStub: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);
  @override
  _i3.Stream<List<double>> get onCurrentExtractedWaveformData =>
      (super.noSuchMethod(
        Invocation.getter(#onCurrentExtractedWaveformData),
        returnValue: _i3.Stream<List<double>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<double>>.empty(),
      ) as _i3.Stream<List<double>>);
  @override
  _i3.Stream<double> get onExtractionProgress => (super.noSuchMethod(
        Invocation.getter(#onExtractionProgress),
        returnValue: _i3.Stream<double>.empty(),
        returnValueForMissingStub: _i3.Stream<double>.empty(),
      ) as _i3.Stream<double>);
  @override
  _i3.Stream<void> get onCompletion => (super.noSuchMethod(
        Invocation.getter(#onCompletion),
        returnValue: _i3.Stream<void>.empty(),
        returnValueForMissingStub: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.Future<void> preparePlayer({
    required String? path,
    double? volume,
    bool? shouldExtractWaveform = true,
    int? noOfSamples = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #preparePlayer,
          [],
          {
            #path: path,
            #volume: volume,
            #shouldExtractWaveform: shouldExtractWaveform,
            #noOfSamples: noOfSamples,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<double>> extractWaveformData({
    required String? path,
    int? noOfSamples = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #extractWaveformData,
          [],
          {
            #path: path,
            #noOfSamples: noOfSamples,
          },
        ),
        returnValue: _i3.Future<List<double>>.value(<double>[]),
        returnValueForMissingStub: _i3.Future<List<double>>.value(<double>[]),
      ) as _i3.Future<List<double>>);
  @override
  _i3.Future<void> startPlayer({
    _i2.FinishMode? finishMode = _i2.FinishMode.stop,
    bool? forceRefresh = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startPlayer,
          [],
          {
            #finishMode: finishMode,
            #forceRefresh: forceRefresh,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> pausePlayer() => (super.noSuchMethod(
        Invocation.method(
          #pausePlayer,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> stopPlayer() => (super.noSuchMethod(
        Invocation.method(
          #stopPlayer,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> setVolume(double? volume) => (super.noSuchMethod(
        Invocation.method(
          #setVolume,
          [volume],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<int> getDuration([_i2.DurationType? durationType]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDuration,
          [durationType],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<void> seekTo(int? progress) => (super.noSuchMethod(
        Invocation.method(
          #seekTo,
          [progress],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopAllPlayers() => super.noSuchMethod(
        Invocation.method(
          #stopAllPlayers,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setRefresh(bool? refresh) => super.noSuchMethod(
        Invocation.method(
          #setRefresh,
          [refresh],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
